generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AccountType {
  ADMIN
  COMPANY
  CANDIDATE
}

model Users {
  //
  id String @id @default(uuid())

  email    String @unique
  password String

  accounts AccountUsers[]

  createdAt String
  updatedAt String
}

model AccountUsers {
  //
  id String @id @default(uuid())

  user   Users  @relation(fields: [userId], references: [id])
  userId String @unique

  account   Account @relation(fields: [accountId], references: [id])
  accountId String

  createdAt String
  updatedAt String

  @@unique([userId, accountId])
}

model Account {
  //
  id String @id @default(uuid())

  profileId String @unique

  users       AccountUsers[]
  accountType AccountType

  createdAt String
  updatedAt String
}

model CompanyProfile {
  //
  id String @id @default(uuid())

  createdAt String
  updatedAt String
}

model CandidateProfile {
  //
  id String @id @default(uuid())

  // about
  name       String
  age        String
  occupation String
  resume     String

  // contact
  address  String
  phone    String
  github   String
  linkedin String
  email    String

  CandidateProfileAcademicEducationModel CandidateProfileAcademicEducationModel[]
  CandidateProfileJobExperiencesModel    CandidateProfileJobExperiencesModel[]
  CandidateProfileCertificatesModel      CandidateProfileCertificatesModel[]
  CandidateProfileProjectsModel          CandidateProfileProjectsModel[]
  CandidateProfileLanguagesModel         CandidateProfileLanguagesModel[]
  CandidateProfileStackListModel         CandidateProfileStackListModel[]

  createdAt String
  updatedAt String
}

model CandidateProfileAcademicEducationModel {
  // 

  id String @id @default(uuid())

  profileId String
  profile   CandidateProfile @relation(fields: [profileId], references: [id])

  institution String
  course      String
  type        String
  status      String
  modality    String

  from String
  to   String

  createdAt String
  updatedAt String
}

model CandidateProfileJobExperiencesModel {
  // 

  id String @id @default(uuid())

  profileId String
  profile   CandidateProfile @relation(fields: [profileId], references: [id])

  company     String
  occupation  String
  resume      String
  current_job Boolean

  from String
  to   String

  createdAt String
  updatedAt String
}

model CandidateProfileCertificatesModel {
  // 

  id String @id @default(uuid())

  profileId String
  profile   CandidateProfile @relation(fields: [profileId], references: [id])

  institution String
  course      String
  workload    String
  link        String

  createdAt String
  updatedAt String
}

model CandidateProfileProjectsModel {
  // 

  id String @id @default(uuid())

  profileId String
  profile   CandidateProfile @relation(fields: [profileId], references: [id])

  title  String
  resume String
  link   String

  createdAt String
  updatedAt String
}

model CandidateProfileLanguagesModel {
  // 

  id String @id @default(uuid())

  profileId String
  profile   CandidateProfile @relation(fields: [profileId], references: [id])

  language String
  level    String

  createdAt String
  updatedAt String
}

model CandidateProfileStackListModel {
  // 

  id String @id @default(uuid())

  profileId String
  profile   CandidateProfile @relation(fields: [profileId], references: [id])

  name     String
  workload String

  createdAt String
  updatedAt String
}
