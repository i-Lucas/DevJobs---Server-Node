generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AccountType {
  ADMIN
  COMPANY
  CANDIDATE
}

model Users {
  //
  id String @id @default(uuid())

  name  String
  photo String

  email    String @unique
  password String

  Account   Account? @relation(fields: [accountId], references: [id])
  accountId String?

  createdAt String
  updatedAt String
}

model Account {
  //
  id String @id @default(uuid())

  profileId  String @unique
  ownerEmail String @unique

  users       Users[]
  accountType AccountType

  createdAt String
  updatedAt String
}

// ------------------------------------------------------------------------------------------------------------- company

model CompanyProfile {
  //
  id String @id @default(uuid())

  CompanyProfileDetailsModel       CompanyProfileDetailsModel?
  CompanyProfileAddressModel       CompanyProfileAddressModel?
  CompanyProfileSupportInfoModel   CompanyProfileSupportInfoModel?
  CompanyProfileSocialNetworkModel CompanyProfileSocialNetworkModel?

  HiringProcess HiringProcess[]

  createdAt String
  updatedAt String
}

model CompanyProfileAddressModel {
  //
  id String @id @default(uuid())

  profileId String         @unique
  profile   CompanyProfile @relation(fields: [profileId], references: [id])

  cep          String
  city         String
  state        String
  number       String
  address      String
  complement   String
  neighborhood String

  createdAt String
  updatedAt String
}

model CompanyProfileDetailsModel {
  //
  id String @id @default(uuid())

  profileId String         @unique
  profile   CompanyProfile @relation(fields: [profileId], references: [id])

  cnpj         String
  about        String
  teamSize     String
  foundedIn    String
  marketArea   String
  description  String
  legalNature  String
  socialReason String
  fantasy_name String

  createdAt String
  updatedAt String
}

model CompanyProfileSupportInfoModel {
  //
  id String @id @default(uuid())

  profileId String         @unique
  profile   CompanyProfile @relation(fields: [profileId], references: [id])

  phone        String
  rhEmail      String
  whatsapp     String
  supportEmail String

  createdAt String
  updatedAt String
}

model CompanyProfileSocialNetworkModel {
  //
  id String @id @default(uuid())

  profileId String         @unique
  profile   CompanyProfile @relation(fields: [profileId], references: [id])

  github    String
  website   String
  twitter   String
  facebook  String
  instagram String
  linkedin  String

  picture String
  banner  String

  createdAt String
  updatedAt String
}

// ------------------------------------------------------------------------------------------------------------- candidate ( developer )

model CandidateProfile {
  //
  id String @id @default(uuid())

  CandidateProfileAcademicEducationModel CandidateProfileAcademicEducationModel[]
  CandidateProfileJobExperiencesModel    CandidateProfileJobExperiencesModel[]
  CandidateProfileCertificatesModel      CandidateProfileCertificatesModel[]
  CandidateProfileProjectsModel          CandidateProfileProjectsModel[]
  CandidateProfileLanguagesModel         CandidateProfileLanguagesModel[]
  CandidateProfileStackListModel         CandidateProfileStackListModel[]
  //
  CandidateProfileAboutModel             CandidateProfileAboutModel?
  CandidateProfileAddressModel           CandidateProfileAddressModel?
  CandidateProfileContactModel           CandidateProfileContactModel?

  createdAt String
  updatedAt String
}

model CandidateProfileContactModel {
  //
  id String @id @default(uuid())

  profileId String           @unique
  profile   CandidateProfile @relation(fields: [profileId], references: [id])

  phone    String
  github   String
  linkedin String
  email    String

  createdAt String
  updatedAt String
}

model CandidateProfileAboutModel {
  //
  id String @id @default(uuid())

  profileId String           @unique
  profile   CandidateProfile @relation(fields: [profileId], references: [id])

  name       String
  age        String
  occupation String
  resume     String
  picture    String

  createdAt String
  updatedAt String
}

model CandidateProfileAddressModel {
  //
  id String @id @default(uuid())

  profileId String           @unique
  profile   CandidateProfile @relation(fields: [profileId], references: [id])

  cep          String
  city         String
  state        String
  number       String
  address      String
  complement   String
  neighborhood String

  createdAt String
  updatedAt String
}

model CandidateProfileAcademicEducationModel {
  // 
  id String @id @default(uuid())

  profileId String
  profile   CandidateProfile @relation(fields: [profileId], references: [id])

  institution String
  course      String
  type        String
  status      String
  modality    String

  from String
  to   String

  createdAt String
  updatedAt String
}

model CandidateProfileJobExperiencesModel {
  // 
  id String @id @default(uuid())

  profileId String
  profile   CandidateProfile @relation(fields: [profileId], references: [id])

  company     String
  occupation  String
  resume      String
  current_job Boolean

  from String
  to   String

  createdAt String
  updatedAt String
}

model CandidateProfileCertificatesModel {
  // 
  id String @id @default(uuid())

  profileId String
  profile   CandidateProfile @relation(fields: [profileId], references: [id])

  institution String
  course      String
  workload    String
  link        String

  createdAt String
  updatedAt String
}

model CandidateProfileProjectsModel {
  // 
  id String @id @default(uuid())

  profileId String
  profile   CandidateProfile @relation(fields: [profileId], references: [id])

  title  String
  resume String
  link   String

  createdAt String
  updatedAt String
}

model CandidateProfileLanguagesModel {
  // 
  id String @id @default(uuid())

  profileId String
  profile   CandidateProfile @relation(fields: [profileId], references: [id])

  language String
  level    String

  createdAt String
  updatedAt String
}

model CandidateProfileStackListModel {
  // 
  id String @id @default(uuid())

  profileId String
  profile   CandidateProfile @relation(fields: [profileId], references: [id])

  name     String
  workload String

  createdAt String
  updatedAt String
}

// ------------------------------------------------------------------------------------------------------------- Hiring Process

enum HiringProcessSteps {
  OPEN_FOR_APPLICATIONS
  RESUME_SCREENING
  INTERVIEW_SELECTION
  INITIAL_INTERVIEWS
  TECHNICAL_ASSESSMENT
  FINAL_INTERVIEWS
  BEHAVIORAL_ASSESSMENT
  PROJECT_CHALLENGE
  MANAGER_INTERVIEWS
  REFERENCE_CHECK
  JOB_OFFER
  PROCESS_COMPLETED
  CANCELLED
  FROZEN
}

model HiringProcess {
  //
  id String @id @default(uuid())

  company          CompanyProfile? @relation(fields: [companyProfileId], references: [id])
  companyProfileId String?

  title            String
  description      String
  category         String
  seniority        String
  differences      String[]
  stacklist        String[]
  requirements     String[]
  benefits         String[]
  salaryRange      String
  negotiable       Boolean
  contractType     String
  locationType     String
  workload         String
  deadline         String
  pcd              Boolean
  recruiter        String
  subscribersCount Int

  steps ProcessStep[]

  createdAt String
  updatedAt String
}

model ProcessStep {
  //
  id String @id @default(uuid())

  identifier      HiringProcessSteps
  candidatesLists ProcessStepList[]

  hiringProcess   HiringProcess? @relation(fields: [hiringProcessId], references: [id])
  hiringProcessId String?

  createdAt String
  updatedAt String
}

model ProcessStepList {
  // 
  id String @id @default(uuid())

  name        String
  description String
  candidates  HiringDeveloperSubscriber[]

  processStep   ProcessStep? @relation(fields: [processStepId], references: [id])
  processStepId String?

  createdAt String
  updatedAt String
}

model HiringDeveloperSubscriber {
  // 
  id String @id @default(uuid())

  name      String
  picture   String
  profileId String
  userId    String

  ProcessStepList   ProcessStepList? @relation(fields: [processStepListId], references: [id])
  processStepListId String?

  createdAt String
  updatedAt String
}
